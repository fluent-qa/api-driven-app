/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.fluentqa.todo.api;

import io.fluentqa.todo.model.Error;
import io.fluentqa.todo.model.Todo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-14T16:29:29.158062+08:00[Asia/Shanghai]")
@Validated
@Tag(name = "v1", description = "Todo related end-points")
public interface ToDoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/todos : Create a new todo
     * Create a new todo
     *
     * @param todo New todo payload (optional)
     * @return Successfully created a new todo (status code 200)
     *         or Request badly formatted (status code 400)
     *         or Too many requests were sent (status code 429)
     */
    @Operation(
        operationId = "createTodo",
        summary = "Create a new todo",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully created a new todo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request badly formatted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many requests were sent", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/todos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Todo> createTodo(
        @Parameter(name = "Todo", description = "New todo payload") @Valid @RequestBody(required = false) Todo todo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uuid\" : \"3d780d09-c520-4817-b430-ce849bcc5423\", \"ownerUuid\" : \"535d6711-2ec0-4ba7-9f34-3d13f25de822\", \"title\" : \"Groceries\", \"state\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/todos/{todoUuid} : Delete a todo
     * Delete a todo by providing its uuid
     *
     * @param todoUuid  (required)
     * @param ownerUuid  (required)
     * @param hard Defines if the deletion is a \&quot;hard\&quot; delete (true) or a \&quot;soft\&quot; delete (false or not present)  (optional)
     * @return Successful response (status code 204)
     *         or Request badly formatted (status code 400)
     */
    @Operation(
        operationId = "deleteTodo",
        summary = "Delete a todo",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful response"),
            @ApiResponse(responseCode = "400", description = "Request badly formatted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/todos/{todoUuid}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteTodo(
        @Parameter(name = "todoUuid", description = "", required = true) @PathVariable("todoUuid") String todoUuid,
        @NotNull @Parameter(name = "ownerUuid", description = "", required = true) @Valid @RequestParam(value = "ownerUuid", required = true) String ownerUuid,
        @Parameter(name = "hard", description = "Defines if the deletion is a \"hard\" delete (true) or a \"soft\" delete (false or not present) ") @Valid @RequestParam(value = "hard", required = false) Boolean hard
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/todos/{todoUuid} : Get a todo
     * Get a todo by providing its uuid
     *
     * @param ownerUuid  (required)
     * @param todoUuid  (required)
     * @return Successfully retrieved the todo (status code 200)
     *         or Request badly formatted (status code 400)
     *         or Couldn&#39;t find the todo with the provided uuid (status code 404)
     *         or Too many requests were sent (status code 429)
     */
    @Operation(
        operationId = "getTodo",
        summary = "Get a todo",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved the todo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request badly formatted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Couldn't find the todo with the provided uuid"),
            @ApiResponse(responseCode = "429", description = "Too many requests were sent", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/todos/{todoUuid}",
        produces = { "application/json" }
    )
    default ResponseEntity<Todo> getTodo(
        @NotNull @Parameter(name = "ownerUuid", description = "", required = true) @Valid @RequestParam(value = "ownerUuid", required = true) String ownerUuid,
        @Parameter(name = "todoUuid", description = "", required = true) @PathVariable("todoUuid") String todoUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uuid\" : \"3d780d09-c520-4817-b430-ce849bcc5423\", \"ownerUuid\" : \"535d6711-2ec0-4ba7-9f34-3d13f25de822\", \"title\" : \"Groceries\", \"state\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/todos : List all the todos
     * List all the todos of the user provided in the query parameters
     *
     * @param ownerUuid  (required)
     * @return Successfully retrieved all the todos (status code 200)
     *         or Request badly formatted (status code 400)
     *         or Too many requests were sent (status code 429)
     */
    @Operation(
        operationId = "listTodos",
        summary = "List all the todos",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all the todos", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request badly formatted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many requests were sent", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/todos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Todo>> listTodos(
        @NotNull @Parameter(name = "ownerUuid", description = "", required = true) @Valid @RequestParam(value = "ownerUuid", required = true) String ownerUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uuid\" : \"3d780d09-c520-4817-b430-ce849bcc5423\", \"ownerUuid\" : \"535d6711-2ec0-4ba7-9f34-3d13f25de822\", \"title\" : \"Groceries\", \"state\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/todos/{todoUuid} : Update a todo
     * Update a todo by providing its uuid and the updated todo content
     *
     * @param ownerUuid  (required)
     * @param todoUuid  (required)
     * @param todo New todo payload (optional)
     * @return Successful response (status code 200)
     *         or Request badly formatted (status code 400)
     *         or Too many requests were sent (status code 429)
     */
    @Operation(
        operationId = "updateTodo",
        summary = "Update a todo",
        tags = { "todo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Todo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Request badly formatted", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many requests were sent", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/todos/{todoUuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Todo> updateTodo(
        @NotNull @Parameter(name = "ownerUuid", description = "", required = true) @Valid @RequestParam(value = "ownerUuid", required = true) String ownerUuid,
        @Parameter(name = "todoUuid", description = "", required = true) @PathVariable("todoUuid") String todoUuid,
        @Parameter(name = "Todo", description = "New todo payload") @Valid @RequestBody(required = false) Todo todo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uuid\" : \"3d780d09-c520-4817-b430-ce849bcc5423\", \"ownerUuid\" : \"535d6711-2ec0-4ba7-9f34-3d13f25de822\", \"title\" : \"Groceries\", \"state\" : \"ACTIVE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
